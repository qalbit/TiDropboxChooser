/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.dropbox;

import java.util.Map;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiIntentWrapper;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import ti.dropbox.chooser.DbxChooser;
import ti.dropbox.chooser.DbxChooser.ResultType;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;


@Kroll.module(name="TiDropboxChooser", id="ti.dropboxchooser")
public class TiDropboxChooserModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiDropboxChooserModule";
	
	private static final String DROPBOX_PACKAGE_NAME = "com.dropbox.android";
	
	private String APP_KEY = "";
    
    private DbxChooser mChooser;

	private ResultType DBX_RESULT_TYPE;
    
    @Kroll.constant public static final int PREVIEW_LINK = 0;
    
    @Kroll.constant public static final int DIRECT_LINK = 1;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TiDropboxChooserModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}
	
	@Kroll.method
	public void init(KrollDict args) {
		APP_KEY = args.optString("appKey", "");
		int resultType = args.optInt("resultType", 0);
		switch(resultType) {
		case 0:
			DBX_RESULT_TYPE = ResultType.PREVIEW_LINK;
			break;
		case 1:
			DBX_RESULT_TYPE = ResultType.DIRECT_LINK;
			break;
		default:
			DBX_RESULT_TYPE = ResultType.DIRECT_LINK;
			break;
		}
		
		mChooser = new DbxChooser(APP_KEY);
		mChooser = mChooser.forResultType(DBX_RESULT_TYPE);
	}
	
	@Kroll.method
	public void openDialog(KrollFunction callback)
	{
		if(!APP_KEY.equals("") && (APP_KEY.length() > 0)) {
			Activity activity = TiApplication.getInstance().getCurrentActivity();
			
			if (isDropboxInstalled(activity)) {
				TiActivitySupport activitySupport = (TiActivitySupport) activity;
				
				TiIntentWrapper intent = new TiIntentWrapper(mChooser.getIntent());
				
				DropboxResultHandler resultHandler = new DropboxResultHandler();
				resultHandler.callback = callback;
				resultHandler.intent = intent.getIntent();
				resultHandler.activitySupport = activitySupport;
				
				activity.runOnUiThread(resultHandler);
			}
			else {
				launchMarket(activity);
			}
		} else {
			KrollDict event = new KrollDict();
			event.put(TiC.EVENT_PROPERTY_REQUEST_CODE, 0);
			event.put(TiC.EVENT_PROPERTY_RESULT_CODE, 0);
			event.put("cancel", true);
			callback.callAsync(getKrollObject(), event);
		}
	}
	
	protected class DropboxResultHandler implements TiActivityResultHandler, Runnable
	{
		protected KrollFunction callback;
		protected Intent intent;
		protected TiActivitySupport activitySupport;
		protected int code;
		
		
		
		
		public void run()
		{
			code = activitySupport.getUniqueResultCode();
			activitySupport.launchActivityForResult(intent, code, this);
		}
		
		public void onResult(Activity activity, int requestCode, int resultCode, Intent data)
		{
			KrollDict event = new KrollDict();
			
			event.put(TiC.EVENT_PROPERTY_REQUEST_CODE, requestCode);
			event.put(TiC.EVENT_PROPERTY_RESULT_CODE, resultCode);
			
            if (resultCode == Activity.RESULT_OK) {
	            DbxChooser.Result result = new DbxChooser.Result(data);
	            Log.d(LCAT, "Link to selected file: " + result.getLink());
				
				event.put("url", result.getLink().toString());
				event.put("icon", result.getIcon().toString());

				Map<String, Uri> thumbs = result.getThumbnails();
				
				if (thumbs.get("64x64") != null) {
					event.put("thumb64", thumbs.get("64x64").toString());
					event.put("thumb200", thumbs.get("200x200").toString());
					event.put("thumb640", thumbs.get("640x480").toString());
				}
		
				Log.d(LCAT, event.toString());
		
				callback.callAsync(getKrollObject(), event);
			}
			else {
				event.put("cancel", true);
				callback.callAsync(getKrollObject(), event);
			}
		}
		
		public void onError(Activity activity, int requestCode, Exception e) {
			KrollDict event = new KrollDict();
			
			event.put(TiC.EVENT_PROPERTY_REQUEST_CODE, requestCode);
			event.put("error", e.getMessage());

			callback.callAsync(getKrollObject(), event);
		}
	}

	private static boolean isDropboxInstalled(Activity act) {
        PackageManager pm = act.getPackageManager();
        try {
            pm.getPackageInfo(DROPBOX_PACKAGE_NAME, PackageManager.GET_ACTIVITIES);
            return true;
        } catch (PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    private static void launchMarket(Activity act) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        // Market page for the official Dropbox App.
        intent.setData(Uri.parse("market://details?id=" + DROPBOX_PACKAGE_NAME));
        act.startActivity(intent);
    }
}

